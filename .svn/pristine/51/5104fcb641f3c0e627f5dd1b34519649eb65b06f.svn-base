package com.daomingedu.art.di.module;

import com.daomingedu.art.mvp.contract.UploadVideoPreviewContract;
import com.daomingedu.art.mvp.model.UploadVideoPreviewModel;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.annotation.Generated;
import javax.inject.Provider;

@Generated(
  value = "dagger.internal.codegen.ComponentProcessor",
  comments = "https://google.github.io/dagger"
)
public final class UploadVideoPreviewModule_ProvideUploadVideoPreviewModelFactory
    implements Factory<UploadVideoPreviewContract.Model> {
  private final UploadVideoPreviewModule module;

  private final Provider<UploadVideoPreviewModel> modelProvider;

  public UploadVideoPreviewModule_ProvideUploadVideoPreviewModelFactory(
      UploadVideoPreviewModule module, Provider<UploadVideoPreviewModel> modelProvider) {
    this.module = module;
    this.modelProvider = modelProvider;
  }

  @Override
  public UploadVideoPreviewContract.Model get() {
    return provideInstance(module, modelProvider);
  }

  public static UploadVideoPreviewContract.Model provideInstance(
      UploadVideoPreviewModule module, Provider<UploadVideoPreviewModel> modelProvider) {
    return proxyProvideUploadVideoPreviewModel(module, modelProvider.get());
  }

  public static UploadVideoPreviewModule_ProvideUploadVideoPreviewModelFactory create(
      UploadVideoPreviewModule module, Provider<UploadVideoPreviewModel> modelProvider) {
    return new UploadVideoPreviewModule_ProvideUploadVideoPreviewModelFactory(
        module, modelProvider);
  }

  public static UploadVideoPreviewContract.Model proxyProvideUploadVideoPreviewModel(
      UploadVideoPreviewModule instance, UploadVideoPreviewModel model) {
    return Preconditions.checkNotNull(
        instance.provideUploadVideoPreviewModel(model),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
