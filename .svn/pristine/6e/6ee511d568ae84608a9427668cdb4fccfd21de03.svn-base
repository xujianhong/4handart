package com.daomingedu.art.di.module;

import com.daomingedu.art.mvp.contract.MusicDanceTestContract;
import com.daomingedu.art.mvp.model.MusicDanceTestModel;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.annotation.Generated;
import javax.inject.Provider;

@Generated(
  value = "dagger.internal.codegen.ComponentProcessor",
  comments = "https://google.github.io/dagger"
)
public final class MusicDanceTestModule_ProvideMusicDanceTestModelFactory
    implements Factory<MusicDanceTestContract.Model> {
  private final MusicDanceTestModule module;

  private final Provider<MusicDanceTestModel> modelProvider;

  public MusicDanceTestModule_ProvideMusicDanceTestModelFactory(
      MusicDanceTestModule module, Provider<MusicDanceTestModel> modelProvider) {
    this.module = module;
    this.modelProvider = modelProvider;
  }

  @Override
  public MusicDanceTestContract.Model get() {
    return provideInstance(module, modelProvider);
  }

  public static MusicDanceTestContract.Model provideInstance(
      MusicDanceTestModule module, Provider<MusicDanceTestModel> modelProvider) {
    return proxyProvideMusicDanceTestModel(module, modelProvider.get());
  }

  public static MusicDanceTestModule_ProvideMusicDanceTestModelFactory create(
      MusicDanceTestModule module, Provider<MusicDanceTestModel> modelProvider) {
    return new MusicDanceTestModule_ProvideMusicDanceTestModelFactory(module, modelProvider);
  }

  public static MusicDanceTestContract.Model proxyProvideMusicDanceTestModel(
      MusicDanceTestModule instance, MusicDanceTestModel model) {
    return Preconditions.checkNotNull(
        instance.provideMusicDanceTestModel(model),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
