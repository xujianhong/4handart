package com.daomingedu.art.mvp.presenter;

import android.app.Application;
import com.daomingedu.art.mvp.contract.MusicDanceTestContract;
import com.daomingedu.art.mvp.model.entity.TestCityBean;
import com.daomingedu.art.mvp.ui.adapter.MusicDanceTestAdapter;
import com.jess.arms.http.imageloader.ImageLoader;
import com.jess.arms.integration.AppManager;
import dagger.internal.Factory;
import java.util.List;
import javax.annotation.Generated;
import javax.inject.Provider;
import me.jessyan.rxerrorhandler.core.RxErrorHandler;

@Generated(
  value = "dagger.internal.codegen.ComponentProcessor",
  comments = "https://google.github.io/dagger"
)
public final class MusicDanceTestPresenter_Factory implements Factory<MusicDanceTestPresenter> {
  private final Provider<MusicDanceTestContract.Model> modelProvider;

  private final Provider<MusicDanceTestContract.View> rootViewProvider;

  private final Provider<RxErrorHandler> mErrorHandlerProvider;

  private final Provider<Application> mApplicationProvider;

  private final Provider<ImageLoader> mImageLoaderProvider;

  private final Provider<AppManager> mAppManagerProvider;

  private final Provider<MusicDanceTestAdapter> mAdapterProvider;

  private final Provider<List<TestCityBean>> mDatasProvider;

  public MusicDanceTestPresenter_Factory(
      Provider<MusicDanceTestContract.Model> modelProvider,
      Provider<MusicDanceTestContract.View> rootViewProvider,
      Provider<RxErrorHandler> mErrorHandlerProvider,
      Provider<Application> mApplicationProvider,
      Provider<ImageLoader> mImageLoaderProvider,
      Provider<AppManager> mAppManagerProvider,
      Provider<MusicDanceTestAdapter> mAdapterProvider,
      Provider<List<TestCityBean>> mDatasProvider) {
    this.modelProvider = modelProvider;
    this.rootViewProvider = rootViewProvider;
    this.mErrorHandlerProvider = mErrorHandlerProvider;
    this.mApplicationProvider = mApplicationProvider;
    this.mImageLoaderProvider = mImageLoaderProvider;
    this.mAppManagerProvider = mAppManagerProvider;
    this.mAdapterProvider = mAdapterProvider;
    this.mDatasProvider = mDatasProvider;
  }

  @Override
  public MusicDanceTestPresenter get() {
    return provideInstance(
        modelProvider,
        rootViewProvider,
        mErrorHandlerProvider,
        mApplicationProvider,
        mImageLoaderProvider,
        mAppManagerProvider,
        mAdapterProvider,
        mDatasProvider);
  }

  public static MusicDanceTestPresenter provideInstance(
      Provider<MusicDanceTestContract.Model> modelProvider,
      Provider<MusicDanceTestContract.View> rootViewProvider,
      Provider<RxErrorHandler> mErrorHandlerProvider,
      Provider<Application> mApplicationProvider,
      Provider<ImageLoader> mImageLoaderProvider,
      Provider<AppManager> mAppManagerProvider,
      Provider<MusicDanceTestAdapter> mAdapterProvider,
      Provider<List<TestCityBean>> mDatasProvider) {
    MusicDanceTestPresenter instance =
        new MusicDanceTestPresenter(modelProvider.get(), rootViewProvider.get());
    MusicDanceTestPresenter_MembersInjector.injectMErrorHandler(
        instance, mErrorHandlerProvider.get());
    MusicDanceTestPresenter_MembersInjector.injectMApplication(
        instance, mApplicationProvider.get());
    MusicDanceTestPresenter_MembersInjector.injectMImageLoader(
        instance, mImageLoaderProvider.get());
    MusicDanceTestPresenter_MembersInjector.injectMAppManager(instance, mAppManagerProvider.get());
    MusicDanceTestPresenter_MembersInjector.injectMAdapter(instance, mAdapterProvider.get());
    MusicDanceTestPresenter_MembersInjector.injectMDatas(instance, mDatasProvider.get());
    return instance;
  }

  public static MusicDanceTestPresenter_Factory create(
      Provider<MusicDanceTestContract.Model> modelProvider,
      Provider<MusicDanceTestContract.View> rootViewProvider,
      Provider<RxErrorHandler> mErrorHandlerProvider,
      Provider<Application> mApplicationProvider,
      Provider<ImageLoader> mImageLoaderProvider,
      Provider<AppManager> mAppManagerProvider,
      Provider<MusicDanceTestAdapter> mAdapterProvider,
      Provider<List<TestCityBean>> mDatasProvider) {
    return new MusicDanceTestPresenter_Factory(
        modelProvider,
        rootViewProvider,
        mErrorHandlerProvider,
        mApplicationProvider,
        mImageLoaderProvider,
        mAppManagerProvider,
        mAdapterProvider,
        mDatasProvider);
  }

  public static MusicDanceTestPresenter newMusicDanceTestPresenter(
      MusicDanceTestContract.Model model, MusicDanceTestContract.View rootView) {
    return new MusicDanceTestPresenter(model, rootView);
  }
}
