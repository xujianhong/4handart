package com.daomingedu.art.di.module;

import com.daomingedu.art.mvp.contract.CertificationContract;
import com.daomingedu.art.mvp.model.CertificationModel;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.annotation.Generated;
import javax.inject.Provider;

@Generated(
  value = "dagger.internal.codegen.ComponentProcessor",
  comments = "https://google.github.io/dagger"
)
public final class CertificationModule_ProvideCertificationModelFactory
    implements Factory<CertificationContract.Model> {
  private final CertificationModule module;

  private final Provider<CertificationModel> modelProvider;

  public CertificationModule_ProvideCertificationModelFactory(
      CertificationModule module, Provider<CertificationModel> modelProvider) {
    this.module = module;
    this.modelProvider = modelProvider;
  }

  @Override
  public CertificationContract.Model get() {
    return provideInstance(module, modelProvider);
  }

  public static CertificationContract.Model provideInstance(
      CertificationModule module, Provider<CertificationModel> modelProvider) {
    return proxyProvideCertificationModel(module, modelProvider.get());
  }

  public static CertificationModule_ProvideCertificationModelFactory create(
      CertificationModule module, Provider<CertificationModel> modelProvider) {
    return new CertificationModule_ProvideCertificationModelFactory(module, modelProvider);
  }

  public static CertificationContract.Model proxyProvideCertificationModel(
      CertificationModule instance, CertificationModel model) {
    return Preconditions.checkNotNull(
        instance.provideCertificationModel(model),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
