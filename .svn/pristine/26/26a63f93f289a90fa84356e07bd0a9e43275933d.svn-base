package com.daomingedu.art.di.module;

import com.daomingedu.art.mvp.contract.UploadShareContract;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.annotation.Generated;

@Generated(
  value = "dagger.internal.codegen.ComponentProcessor",
  comments = "https://google.github.io/dagger"
)
public final class UploadShareModule_ProvideUploadShareViewFactory
    implements Factory<UploadShareContract.View> {
  private final UploadShareModule module;

  public UploadShareModule_ProvideUploadShareViewFactory(UploadShareModule module) {
    this.module = module;
  }

  @Override
  public UploadShareContract.View get() {
    return provideInstance(module);
  }

  public static UploadShareContract.View provideInstance(UploadShareModule module) {
    return proxyProvideUploadShareView(module);
  }

  public static UploadShareModule_ProvideUploadShareViewFactory create(UploadShareModule module) {
    return new UploadShareModule_ProvideUploadShareViewFactory(module);
  }

  public static UploadShareContract.View proxyProvideUploadShareView(UploadShareModule instance) {
    return Preconditions.checkNotNull(
        instance.provideUploadShareView(),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
