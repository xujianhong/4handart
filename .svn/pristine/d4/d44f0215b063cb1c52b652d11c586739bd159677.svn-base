package com.daomingedu.art.di.module;

import com.daomingedu.art.mvp.model.entity.TestCityBean;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import java.util.List;
import javax.annotation.Generated;

@Generated(
  value = "dagger.internal.codegen.ComponentProcessor",
  comments = "https://google.github.io/dagger"
)
public final class MusicDanceTestModule_ProvideDatasFactory implements Factory<List<TestCityBean>> {
  private final MusicDanceTestModule module;

  public MusicDanceTestModule_ProvideDatasFactory(MusicDanceTestModule module) {
    this.module = module;
  }

  @Override
  public List<TestCityBean> get() {
    return provideInstance(module);
  }

  public static List<TestCityBean> provideInstance(MusicDanceTestModule module) {
    return proxyProvideDatas(module);
  }

  public static MusicDanceTestModule_ProvideDatasFactory create(MusicDanceTestModule module) {
    return new MusicDanceTestModule_ProvideDatasFactory(module);
  }

  public static List<TestCityBean> proxyProvideDatas(MusicDanceTestModule instance) {
    return Preconditions.checkNotNull(
        instance.provideDatas(), "Cannot return null from a non-@Nullable @Provides method");
  }
}
