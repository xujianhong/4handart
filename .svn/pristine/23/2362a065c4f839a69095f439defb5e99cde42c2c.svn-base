package com.daomingedu.art.di.module;

import com.daomingedu.art.mvp.contract.MusicDanceTestContract;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.annotation.Generated;

@Generated(
  value = "dagger.internal.codegen.ComponentProcessor",
  comments = "https://google.github.io/dagger"
)
public final class MusicDanceTestModule_ProvideMusicDanceTestViewFactory
    implements Factory<MusicDanceTestContract.View> {
  private final MusicDanceTestModule module;

  public MusicDanceTestModule_ProvideMusicDanceTestViewFactory(MusicDanceTestModule module) {
    this.module = module;
  }

  @Override
  public MusicDanceTestContract.View get() {
    return provideInstance(module);
  }

  public static MusicDanceTestContract.View provideInstance(MusicDanceTestModule module) {
    return proxyProvideMusicDanceTestView(module);
  }

  public static MusicDanceTestModule_ProvideMusicDanceTestViewFactory create(
      MusicDanceTestModule module) {
    return new MusicDanceTestModule_ProvideMusicDanceTestViewFactory(module);
  }

  public static MusicDanceTestContract.View proxyProvideMusicDanceTestView(
      MusicDanceTestModule instance) {
    return Preconditions.checkNotNull(
        instance.provideMusicDanceTestView(),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
