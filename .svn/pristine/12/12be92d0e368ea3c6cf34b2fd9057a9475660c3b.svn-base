package com.daomingedu.art.mvp.presenter;

import android.app.Application;
import com.daomingedu.art.mvp.contract.StudyCircleContract;
import com.daomingedu.art.mvp.model.entity.ShareBean;
import com.daomingedu.art.mvp.ui.adapter.ShareAdapter;
import com.jess.arms.http.imageloader.ImageLoader;
import com.jess.arms.integration.AppManager;
import dagger.internal.Factory;
import java.util.List;
import javax.annotation.Generated;
import javax.inject.Provider;
import me.jessyan.rxerrorhandler.core.RxErrorHandler;

@Generated(
  value = "dagger.internal.codegen.ComponentProcessor",
  comments = "https://google.github.io/dagger"
)
public final class StudyCirclePresenter_Factory implements Factory<StudyCirclePresenter> {
  private final Provider<StudyCircleContract.Model> modelProvider;

  private final Provider<StudyCircleContract.View> rootViewProvider;

  private final Provider<RxErrorHandler> mErrorHandlerProvider;

  private final Provider<Application> mApplicationProvider;

  private final Provider<ImageLoader> mImageLoaderProvider;

  private final Provider<AppManager> mAppManagerProvider;

  private final Provider<ShareAdapter> mAdapterProvider;

  private final Provider<List<ShareBean>> mDataProvider;

  public StudyCirclePresenter_Factory(
      Provider<StudyCircleContract.Model> modelProvider,
      Provider<StudyCircleContract.View> rootViewProvider,
      Provider<RxErrorHandler> mErrorHandlerProvider,
      Provider<Application> mApplicationProvider,
      Provider<ImageLoader> mImageLoaderProvider,
      Provider<AppManager> mAppManagerProvider,
      Provider<ShareAdapter> mAdapterProvider,
      Provider<List<ShareBean>> mDataProvider) {
    this.modelProvider = modelProvider;
    this.rootViewProvider = rootViewProvider;
    this.mErrorHandlerProvider = mErrorHandlerProvider;
    this.mApplicationProvider = mApplicationProvider;
    this.mImageLoaderProvider = mImageLoaderProvider;
    this.mAppManagerProvider = mAppManagerProvider;
    this.mAdapterProvider = mAdapterProvider;
    this.mDataProvider = mDataProvider;
  }

  @Override
  public StudyCirclePresenter get() {
    return provideInstance(
        modelProvider,
        rootViewProvider,
        mErrorHandlerProvider,
        mApplicationProvider,
        mImageLoaderProvider,
        mAppManagerProvider,
        mAdapterProvider,
        mDataProvider);
  }

  public static StudyCirclePresenter provideInstance(
      Provider<StudyCircleContract.Model> modelProvider,
      Provider<StudyCircleContract.View> rootViewProvider,
      Provider<RxErrorHandler> mErrorHandlerProvider,
      Provider<Application> mApplicationProvider,
      Provider<ImageLoader> mImageLoaderProvider,
      Provider<AppManager> mAppManagerProvider,
      Provider<ShareAdapter> mAdapterProvider,
      Provider<List<ShareBean>> mDataProvider) {
    StudyCirclePresenter instance =
        new StudyCirclePresenter(modelProvider.get(), rootViewProvider.get());
    StudyCirclePresenter_MembersInjector.injectMErrorHandler(instance, mErrorHandlerProvider.get());
    StudyCirclePresenter_MembersInjector.injectMApplication(instance, mApplicationProvider.get());
    StudyCirclePresenter_MembersInjector.injectMImageLoader(instance, mImageLoaderProvider.get());
    StudyCirclePresenter_MembersInjector.injectMAppManager(instance, mAppManagerProvider.get());
    StudyCirclePresenter_MembersInjector.injectMAdapter(instance, mAdapterProvider.get());
    StudyCirclePresenter_MembersInjector.injectMData(instance, mDataProvider.get());
    return instance;
  }

  public static StudyCirclePresenter_Factory create(
      Provider<StudyCircleContract.Model> modelProvider,
      Provider<StudyCircleContract.View> rootViewProvider,
      Provider<RxErrorHandler> mErrorHandlerProvider,
      Provider<Application> mApplicationProvider,
      Provider<ImageLoader> mImageLoaderProvider,
      Provider<AppManager> mAppManagerProvider,
      Provider<ShareAdapter> mAdapterProvider,
      Provider<List<ShareBean>> mDataProvider) {
    return new StudyCirclePresenter_Factory(
        modelProvider,
        rootViewProvider,
        mErrorHandlerProvider,
        mApplicationProvider,
        mImageLoaderProvider,
        mAppManagerProvider,
        mAdapterProvider,
        mDataProvider);
  }

  public static StudyCirclePresenter newStudyCirclePresenter(
      StudyCircleContract.Model model, StudyCircleContract.View rootView) {
    return new StudyCirclePresenter(model, rootView);
  }
}
