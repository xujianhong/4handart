package com.daomingedu.art.di.module;

import com.daomingedu.art.mvp.contract.BlockUsersContract;
import com.daomingedu.art.mvp.model.BlockUsersModel;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.annotation.Generated;
import javax.inject.Provider;

@Generated(
  value = "dagger.internal.codegen.ComponentProcessor",
  comments = "https://google.github.io/dagger"
)
public final class BlockUsersModule_ProvideBlockUsersModelFactory
    implements Factory<BlockUsersContract.Model> {
  private final BlockUsersModule module;

  private final Provider<BlockUsersModel> modelProvider;

  public BlockUsersModule_ProvideBlockUsersModelFactory(
      BlockUsersModule module, Provider<BlockUsersModel> modelProvider) {
    this.module = module;
    this.modelProvider = modelProvider;
  }

  @Override
  public BlockUsersContract.Model get() {
    return provideInstance(module, modelProvider);
  }

  public static BlockUsersContract.Model provideInstance(
      BlockUsersModule module, Provider<BlockUsersModel> modelProvider) {
    return proxyProvideBlockUsersModel(module, modelProvider.get());
  }

  public static BlockUsersModule_ProvideBlockUsersModelFactory create(
      BlockUsersModule module, Provider<BlockUsersModel> modelProvider) {
    return new BlockUsersModule_ProvideBlockUsersModelFactory(module, modelProvider);
  }

  public static BlockUsersContract.Model proxyProvideBlockUsersModel(
      BlockUsersModule instance, BlockUsersModel model) {
    return Preconditions.checkNotNull(
        instance.provideBlockUsersModel(model),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
