package com.daomingedu.art.di.module;

import com.daomingedu.art.mvp.contract.ImageDetailsContract;
import com.daomingedu.art.mvp.model.ImageDetailsModel;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.annotation.Generated;
import javax.inject.Provider;

@Generated(
  value = "dagger.internal.codegen.ComponentProcessor",
  comments = "https://google.github.io/dagger"
)
public final class ImageDetailsModule_ProvideImageDetailsModelFactory
    implements Factory<ImageDetailsContract.Model> {
  private final ImageDetailsModule module;

  private final Provider<ImageDetailsModel> modelProvider;

  public ImageDetailsModule_ProvideImageDetailsModelFactory(
      ImageDetailsModule module, Provider<ImageDetailsModel> modelProvider) {
    this.module = module;
    this.modelProvider = modelProvider;
  }

  @Override
  public ImageDetailsContract.Model get() {
    return provideInstance(module, modelProvider);
  }

  public static ImageDetailsContract.Model provideInstance(
      ImageDetailsModule module, Provider<ImageDetailsModel> modelProvider) {
    return proxyProvideImageDetailsModel(module, modelProvider.get());
  }

  public static ImageDetailsModule_ProvideImageDetailsModelFactory create(
      ImageDetailsModule module, Provider<ImageDetailsModel> modelProvider) {
    return new ImageDetailsModule_ProvideImageDetailsModelFactory(module, modelProvider);
  }

  public static ImageDetailsContract.Model proxyProvideImageDetailsModel(
      ImageDetailsModule instance, ImageDetailsModel model) {
    return Preconditions.checkNotNull(
        instance.provideImageDetailsModel(model),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
