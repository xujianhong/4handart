package com.daomingedu.art.di.module;

import com.daomingedu.art.mvp.contract.MainContract;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.annotation.Generated;

@Generated(
  value = "dagger.internal.codegen.ComponentProcessor",
  comments = "https://google.github.io/dagger"
)
public final class MainModule_ProvideMainViewFactory implements Factory<MainContract.View> {
  private final MainModule module;

  public MainModule_ProvideMainViewFactory(MainModule module) {
    this.module = module;
  }

  @Override
  public MainContract.View get() {
    return provideInstance(module);
  }

  public static MainContract.View provideInstance(MainModule module) {
    return proxyProvideMainView(module);
  }

  public static MainModule_ProvideMainViewFactory create(MainModule module) {
    return new MainModule_ProvideMainViewFactory(module);
  }

  public static MainContract.View proxyProvideMainView(MainModule instance) {
    return Preconditions.checkNotNull(
        instance.provideMainView(), "Cannot return null from a non-@Nullable @Provides method");
  }
}
