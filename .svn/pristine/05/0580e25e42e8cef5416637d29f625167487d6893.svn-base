package com.daomingedu.art.di.module;

import com.daomingedu.art.mvp.contract.StudyCircleInfoContract;
import com.daomingedu.art.mvp.model.StudyCircleInfoModel;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.annotation.Generated;
import javax.inject.Provider;

@Generated(
  value = "dagger.internal.codegen.ComponentProcessor",
  comments = "https://google.github.io/dagger"
)
public final class StudyCircleInfoModule_ProvideStudyCircleInfoModelFactory
    implements Factory<StudyCircleInfoContract.Model> {
  private final StudyCircleInfoModule module;

  private final Provider<StudyCircleInfoModel> modelProvider;

  public StudyCircleInfoModule_ProvideStudyCircleInfoModelFactory(
      StudyCircleInfoModule module, Provider<StudyCircleInfoModel> modelProvider) {
    this.module = module;
    this.modelProvider = modelProvider;
  }

  @Override
  public StudyCircleInfoContract.Model get() {
    return provideInstance(module, modelProvider);
  }

  public static StudyCircleInfoContract.Model provideInstance(
      StudyCircleInfoModule module, Provider<StudyCircleInfoModel> modelProvider) {
    return proxyProvideStudyCircleInfoModel(module, modelProvider.get());
  }

  public static StudyCircleInfoModule_ProvideStudyCircleInfoModelFactory create(
      StudyCircleInfoModule module, Provider<StudyCircleInfoModel> modelProvider) {
    return new StudyCircleInfoModule_ProvideStudyCircleInfoModelFactory(module, modelProvider);
  }

  public static StudyCircleInfoContract.Model proxyProvideStudyCircleInfoModel(
      StudyCircleInfoModule instance, StudyCircleInfoModel model) {
    return Preconditions.checkNotNull(
        instance.provideStudyCircleInfoModel(model),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
