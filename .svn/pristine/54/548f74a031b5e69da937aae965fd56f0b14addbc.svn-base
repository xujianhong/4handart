package com.daomingedu.art.di.module;

import com.daomingedu.art.mvp.contract.SelectImageVideoContract;
import com.daomingedu.art.mvp.model.SelectImageVideoModel;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.annotation.Generated;
import javax.inject.Provider;

@Generated(
  value = "dagger.internal.codegen.ComponentProcessor",
  comments = "https://google.github.io/dagger"
)
public final class SelectImageVideoModule_ProvideSelectImageVideoModelFactory
    implements Factory<SelectImageVideoContract.Model> {
  private final SelectImageVideoModule module;

  private final Provider<SelectImageVideoModel> modelProvider;

  public SelectImageVideoModule_ProvideSelectImageVideoModelFactory(
      SelectImageVideoModule module, Provider<SelectImageVideoModel> modelProvider) {
    this.module = module;
    this.modelProvider = modelProvider;
  }

  @Override
  public SelectImageVideoContract.Model get() {
    return provideInstance(module, modelProvider);
  }

  public static SelectImageVideoContract.Model provideInstance(
      SelectImageVideoModule module, Provider<SelectImageVideoModel> modelProvider) {
    return proxyProvideSelectImageVideoModel(module, modelProvider.get());
  }

  public static SelectImageVideoModule_ProvideSelectImageVideoModelFactory create(
      SelectImageVideoModule module, Provider<SelectImageVideoModel> modelProvider) {
    return new SelectImageVideoModule_ProvideSelectImageVideoModelFactory(module, modelProvider);
  }

  public static SelectImageVideoContract.Model proxyProvideSelectImageVideoModel(
      SelectImageVideoModule instance, SelectImageVideoModel model) {
    return Preconditions.checkNotNull(
        instance.provideSelectImageVideoModel(model),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
