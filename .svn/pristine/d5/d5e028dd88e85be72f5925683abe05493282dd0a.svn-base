package com.daomingedu.art.di.component;

import android.app.Application;
import com.daomingedu.art.di.module.MyStudyCircleModule;
import com.daomingedu.art.di.module.MyStudyCircleModule_ProvideAdapterFactory;
import com.daomingedu.art.di.module.MyStudyCircleModule_ProvideDatasFactory;
import com.daomingedu.art.di.module.MyStudyCircleModule_ProvideMyStudyCircleModelFactory;
import com.daomingedu.art.di.module.MyStudyCircleModule_ProvideMyStudyCircleViewFactory;
import com.daomingedu.art.mvp.contract.MyStudyCircleContract;
import com.daomingedu.art.mvp.model.MyStudyCircleModel;
import com.daomingedu.art.mvp.model.MyStudyCircleModel_Factory;
import com.daomingedu.art.mvp.model.entity.ShareBean;
import com.daomingedu.art.mvp.presenter.MyStudyCirclePresenter;
import com.daomingedu.art.mvp.presenter.MyStudyCirclePresenter_Factory;
import com.daomingedu.art.mvp.ui.activity.MyStudyCircleActivity;
import com.daomingedu.art.mvp.ui.activity.MyStudyCircleActivity_MembersInjector;
import com.daomingedu.art.mvp.ui.adapter.ShareAdapter;
import com.google.gson.Gson;
import com.jess.arms.base.BaseActivity_MembersInjector;
import com.jess.arms.di.component.AppComponent;
import com.jess.arms.http.imageloader.ImageLoader;
import com.jess.arms.integration.AppManager;
import com.jess.arms.integration.IRepositoryManager;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import java.util.List;
import javax.annotation.Generated;
import javax.inject.Provider;
import me.jessyan.rxerrorhandler.core.RxErrorHandler;

@Generated(
  value = "dagger.internal.codegen.ComponentProcessor",
  comments = "https://google.github.io/dagger"
)
public final class DaggerMyStudyCircleComponent implements MyStudyCircleComponent {
  private com_jess_arms_di_component_AppComponent_repositoryManager repositoryManagerProvider;

  private com_jess_arms_di_component_AppComponent_gson gsonProvider;

  private com_jess_arms_di_component_AppComponent_application applicationProvider;

  private Provider<MyStudyCircleModel> myStudyCircleModelProvider;

  private Provider<MyStudyCircleContract.Model> provideMyStudyCircleModelProvider;

  private Provider<MyStudyCircleContract.View> provideMyStudyCircleViewProvider;

  private com_jess_arms_di_component_AppComponent_rxErrorHandler rxErrorHandlerProvider;

  private com_jess_arms_di_component_AppComponent_imageLoader imageLoaderProvider;

  private com_jess_arms_di_component_AppComponent_appManager appManagerProvider;

  private Provider<List<ShareBean>> provideDatasProvider;

  private Provider<ShareAdapter> provideAdapterProvider;

  private Provider<MyStudyCirclePresenter> myStudyCirclePresenterProvider;

  private DaggerMyStudyCircleComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.repositoryManagerProvider =
        new com_jess_arms_di_component_AppComponent_repositoryManager(builder.appComponent);
    this.gsonProvider = new com_jess_arms_di_component_AppComponent_gson(builder.appComponent);
    this.applicationProvider =
        new com_jess_arms_di_component_AppComponent_application(builder.appComponent);
    this.myStudyCircleModelProvider =
        DoubleCheck.provider(
            MyStudyCircleModel_Factory.create(
                repositoryManagerProvider, gsonProvider, applicationProvider));
    this.provideMyStudyCircleModelProvider =
        DoubleCheck.provider(
            MyStudyCircleModule_ProvideMyStudyCircleModelFactory.create(
                builder.myStudyCircleModule, myStudyCircleModelProvider));
    this.provideMyStudyCircleViewProvider =
        DoubleCheck.provider(
            MyStudyCircleModule_ProvideMyStudyCircleViewFactory.create(
                builder.myStudyCircleModule));
    this.rxErrorHandlerProvider =
        new com_jess_arms_di_component_AppComponent_rxErrorHandler(builder.appComponent);
    this.imageLoaderProvider =
        new com_jess_arms_di_component_AppComponent_imageLoader(builder.appComponent);
    this.appManagerProvider =
        new com_jess_arms_di_component_AppComponent_appManager(builder.appComponent);
    this.provideDatasProvider =
        DoubleCheck.provider(
            MyStudyCircleModule_ProvideDatasFactory.create(builder.myStudyCircleModule));
    this.provideAdapterProvider =
        DoubleCheck.provider(
            MyStudyCircleModule_ProvideAdapterFactory.create(
                builder.myStudyCircleModule, provideDatasProvider));
    this.myStudyCirclePresenterProvider =
        DoubleCheck.provider(
            MyStudyCirclePresenter_Factory.create(
                provideMyStudyCircleModelProvider,
                provideMyStudyCircleViewProvider,
                rxErrorHandlerProvider,
                applicationProvider,
                imageLoaderProvider,
                appManagerProvider,
                provideAdapterProvider,
                provideDatasProvider));
  }

  @Override
  public void inject(MyStudyCircleActivity activity) {
    injectMyStudyCircleActivity(activity);
  }

  private MyStudyCircleActivity injectMyStudyCircleActivity(MyStudyCircleActivity instance) {
    BaseActivity_MembersInjector.injectMPresenter(instance, myStudyCirclePresenterProvider.get());
    MyStudyCircleActivity_MembersInjector.injectMAdapter(instance, provideAdapterProvider.get());
    MyStudyCircleActivity_MembersInjector.injectMData(instance, provideDatasProvider.get());
    return instance;
  }

  public static final class Builder {
    private MyStudyCircleModule myStudyCircleModule;

    private AppComponent appComponent;

    private Builder() {}

    public MyStudyCircleComponent build() {
      if (myStudyCircleModule == null) {
        throw new IllegalStateException(
            MyStudyCircleModule.class.getCanonicalName() + " must be set");
      }
      if (appComponent == null) {
        throw new IllegalStateException(AppComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerMyStudyCircleComponent(this);
    }

    public Builder myStudyCircleModule(MyStudyCircleModule myStudyCircleModule) {
      this.myStudyCircleModule = Preconditions.checkNotNull(myStudyCircleModule);
      return this;
    }

    public Builder appComponent(AppComponent appComponent) {
      this.appComponent = Preconditions.checkNotNull(appComponent);
      return this;
    }
  }

  private static class com_jess_arms_di_component_AppComponent_repositoryManager
      implements Provider<IRepositoryManager> {
    private final AppComponent appComponent;

    com_jess_arms_di_component_AppComponent_repositoryManager(AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public IRepositoryManager get() {
      return Preconditions.checkNotNull(
          appComponent.repositoryManager(),
          "Cannot return null from a non-@Nullable component method");
    }
  }

  private static class com_jess_arms_di_component_AppComponent_gson implements Provider<Gson> {
    private final AppComponent appComponent;

    com_jess_arms_di_component_AppComponent_gson(AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public Gson get() {
      return Preconditions.checkNotNull(
          appComponent.gson(), "Cannot return null from a non-@Nullable component method");
    }
  }

  private static class com_jess_arms_di_component_AppComponent_application
      implements Provider<Application> {
    private final AppComponent appComponent;

    com_jess_arms_di_component_AppComponent_application(AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public Application get() {
      return Preconditions.checkNotNull(
          appComponent.application(), "Cannot return null from a non-@Nullable component method");
    }
  }

  private static class com_jess_arms_di_component_AppComponent_rxErrorHandler
      implements Provider<RxErrorHandler> {
    private final AppComponent appComponent;

    com_jess_arms_di_component_AppComponent_rxErrorHandler(AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public RxErrorHandler get() {
      return Preconditions.checkNotNull(
          appComponent.rxErrorHandler(),
          "Cannot return null from a non-@Nullable component method");
    }
  }

  private static class com_jess_arms_di_component_AppComponent_imageLoader
      implements Provider<ImageLoader> {
    private final AppComponent appComponent;

    com_jess_arms_di_component_AppComponent_imageLoader(AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public ImageLoader get() {
      return Preconditions.checkNotNull(
          appComponent.imageLoader(), "Cannot return null from a non-@Nullable component method");
    }
  }

  private static class com_jess_arms_di_component_AppComponent_appManager
      implements Provider<AppManager> {
    private final AppComponent appComponent;

    com_jess_arms_di_component_AppComponent_appManager(AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public AppManager get() {
      return Preconditions.checkNotNull(
          appComponent.appManager(), "Cannot return null from a non-@Nullable component method");
    }
  }
}
