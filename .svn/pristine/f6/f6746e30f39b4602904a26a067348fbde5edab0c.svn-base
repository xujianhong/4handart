package com.daomingedu.art.di.module;

import com.daomingedu.art.mvp.contract.RegisterContract;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.annotation.Generated;

@Generated(
  value = "dagger.internal.codegen.ComponentProcessor",
  comments = "https://google.github.io/dagger"
)
public final class RegisterModule_ProvideRegisterViewFactory
    implements Factory<RegisterContract.View> {
  private final RegisterModule module;

  public RegisterModule_ProvideRegisterViewFactory(RegisterModule module) {
    this.module = module;
  }

  @Override
  public RegisterContract.View get() {
    return provideInstance(module);
  }

  public static RegisterContract.View provideInstance(RegisterModule module) {
    return proxyProvideRegisterView(module);
  }

  public static RegisterModule_ProvideRegisterViewFactory create(RegisterModule module) {
    return new RegisterModule_ProvideRegisterViewFactory(module);
  }

  public static RegisterContract.View proxyProvideRegisterView(RegisterModule instance) {
    return Preconditions.checkNotNull(
        instance.provideRegisterView(), "Cannot return null from a non-@Nullable @Provides method");
  }
}
