package com.daomingedu.art.di.module;

import com.daomingedu.art.mvp.contract.ModifyMottoContract;
import com.daomingedu.art.mvp.model.ModifyMottoModel;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.annotation.Generated;
import javax.inject.Provider;

@Generated(
  value = "dagger.internal.codegen.ComponentProcessor",
  comments = "https://google.github.io/dagger"
)
public final class ModifyMottoModule_ProvideModifyMottoModelFactory
    implements Factory<ModifyMottoContract.Model> {
  private final ModifyMottoModule module;

  private final Provider<ModifyMottoModel> modelProvider;

  public ModifyMottoModule_ProvideModifyMottoModelFactory(
      ModifyMottoModule module, Provider<ModifyMottoModel> modelProvider) {
    this.module = module;
    this.modelProvider = modelProvider;
  }

  @Override
  public ModifyMottoContract.Model get() {
    return provideInstance(module, modelProvider);
  }

  public static ModifyMottoContract.Model provideInstance(
      ModifyMottoModule module, Provider<ModifyMottoModel> modelProvider) {
    return proxyProvideModifyMottoModel(module, modelProvider.get());
  }

  public static ModifyMottoModule_ProvideModifyMottoModelFactory create(
      ModifyMottoModule module, Provider<ModifyMottoModel> modelProvider) {
    return new ModifyMottoModule_ProvideModifyMottoModelFactory(module, modelProvider);
  }

  public static ModifyMottoContract.Model proxyProvideModifyMottoModel(
      ModifyMottoModule instance, ModifyMottoModel model) {
    return Preconditions.checkNotNull(
        instance.provideModifyMottoModel(model),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
