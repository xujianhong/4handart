package com.daomingedu.art.util;

import java.lang.System;

@kotlin.Metadata(mv = {1, 1, 15}, bv = {1, 0, 3}, k = 2, d1 = {"\u0000`\n\u0000\n\u0002\u0010\u000e\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\u0010\b\n\u0002\u0018\u0002\n\u0002\u0010\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010$\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0011\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\u001a)\u0010\u000b\u001a\u00020\u0006\"\u0012\b\u0000\u0010\f*\f\u0012\u0004\u0012\u00020\u0006\u0012\u0002\b\u00030\r2\u0006\u0010\u000e\u001a\u0002H\fH\u0002\u00a2\u0006\u0002\u0010\u000f\u001a\u0010\u0010\u0010\u001a\u00020\u00112\u0006\u0010\u0012\u001a\u00020\u0013H\u0002\u001aA\u0010\u0014\u001a\b\u0012\u0004\u0012\u00020\b0\u0007\"\b\b\u0000\u0010\u0015*\u00020\u0016*\u0002H\u00152\u0012\u0010\u0017\u001a\n\u0012\u0006\b\u0001\u0012\u00020\u00010\u0018\"\u00020\u00012\f\u0010\u0019\u001a\b\u0012\u0004\u0012\u00020\b0\u001a\u00a2\u0006\u0002\u0010\u001b\u001aI\u0010\u001c\u001a\b\u0012\u0004\u0012\u00020\n0\u0007\"\b\b\u0000\u0010\u0015*\u00020\u0016*\u0002H\u00152\u0006\u0010\u001d\u001a\u00020\n2\n\b\u0002\u0010\u001e\u001a\u0004\u0018\u00010\u001f2\u0014\b\u0002\u0010 \u001a\u000e\u0012\u0004\u0012\u00020\n\u0012\u0004\u0012\u00020\b0!\u00a2\u0006\u0002\u0010\"\"\u000e\u0010\u0000\u001a\u00020\u0001X\u0082T\u00a2\u0006\u0002\n\u0000\"\u000e\u0010\u0002\u001a\u00020\u0003X\u0082\u0004\u00a2\u0006\u0002\n\u0000\" \u0010\u0004\u001a\u0014\u0012\u0004\u0012\u00020\u0006\u0012\n\u0012\b\u0012\u0004\u0012\u00020\b0\u00070\u0005X\u0082\u0004\u00a2\u0006\u0002\n\u0000\" \u0010\t\u001a\u0014\u0012\u0004\u0012\u00020\u0006\u0012\n\u0012\b\u0012\u0004\u0012\u00020\n0\u00070\u0005X\u0082\u0004\u00a2\u0006\u0002\n\u0000\u00a8\u0006#"}, d2 = {"FRAGMENT_TAG", "", "codeGenerator", "Ljava/util/Random;", "permissionHolder", "Ljava/util/LinkedHashMap;", "", "Lcom/daomingedu/art/util/LambdaHolder;", "", "resultHolder", "Landroid/content/Intent;", "codeGenerate", "M", "", "map", "(Ljava/util/Map;)I", "findOrCreateEmptyFragment", "Lcom/daomingedu/art/util/EmptyFragment;", "manager", "Landroid/support/v4/app/FragmentManager;", "requestPermissions", "F", "Landroid/support/v4/app/FragmentActivity;", "permission", "", "onRequestDone", "Lkotlin/Function0;", "(Landroid/support/v4/app/FragmentActivity;[Ljava/lang/String;Lkotlin/jvm/functions/Function0;)Lcom/daomingedu/art/util/LambdaHolder;", "startActivityForResult", "intent", "options", "Landroid/os/Bundle;", "callback", "Lkotlin/Function1;", "(Landroid/support/v4/app/FragmentActivity;Landroid/content/Intent;Landroid/os/Bundle;Lkotlin/jvm/functions/Function1;)Lcom/daomingedu/art/util/LambdaHolder;", "app_debug"})
public final class EliminateResultKt {
    
    /**
     * Created by Tears丶残阳 on 18-6-18.
     */
    private static final java.lang.String FRAGMENT_TAG = "EmptyFragment";
    private static final java.util.Random codeGenerator = null;
    private static final java.util.LinkedHashMap<java.lang.Integer, com.daomingedu.art.util.LambdaHolder<android.content.Intent>> resultHolder = null;
    private static final java.util.LinkedHashMap<java.lang.Integer, com.daomingedu.art.util.LambdaHolder<kotlin.Unit>> permissionHolder = null;
    
    private static final <M extends java.util.Map<java.lang.Integer, ?>>int codeGenerate(M map) {
        return 0;
    }
    
    /**
     * 查找Activity中有没有EmptyFragment，如果没有则创建EmptyFragment并添加到Activity中
     * @receiver FragmentManager
     * @return EmptyFragment 已创建并已添加到Activity中的Fragment
     */
    private static final com.daomingedu.art.util.EmptyFragment findOrCreateEmptyFragment(android.support.v4.app.FragmentManager manager) {
        return null;
    }
    
    /**
     * 启动Activity并接收Intent的扩展方法，接收回调时不需要重写[Activity#onActivityResult]方法
     * @receiver F  基于[FragmentActivity]的扩展方法
     * @param intent Intent [#startActivity]必需的参数
     * @param options Bundle?   动画参数
     * @param callback (data: Intent) -> Unit   返回此界面时，当[#resultCode]为 RESULT_OK时的回调
     * @return LambdaHolder<Intent> 可以在此对象上继续调用 [LambdaHolder#onCanceled]或
     *     [LambdaHolder#onDefined] 方法来设置 ResultCode 为 RESULT_CANCELED 或 RESULT_FIRST_USER 时的回调
     */
    @org.jetbrains.annotations.NotNull()
    public static final <F extends android.support.v4.app.FragmentActivity>com.daomingedu.art.util.LambdaHolder<android.content.Intent> startActivityForResult(@org.jetbrains.annotations.NotNull()
    F $this$startActivityForResult, @org.jetbrains.annotations.NotNull()
    android.content.Intent intent, @org.jetbrains.annotations.Nullable()
    android.os.Bundle options, @org.jetbrains.annotations.NotNull()
    kotlin.jvm.functions.Function1<? super android.content.Intent, kotlin.Unit> callback) {
        return null;
    }
    
    /**
     * 申请权限的扩展方法，通过lambda传入回调，不需要重写[Activity#onRequestPermissionsResult]方法
     * @receiver F  基于[FragmentActivity]的扩展方法
     * @param permission Array<out String>  要申请的权限
     * @param onRequestDone () -> Unit  申请成功时的回调
     * @return LambdaHolder<Unit>   可以在此对象上继续调用[#onDenied]方法来设置申请失败时的回调
     */
    @org.jetbrains.annotations.NotNull()
    public static final <F extends android.support.v4.app.FragmentActivity>com.daomingedu.art.util.LambdaHolder<kotlin.Unit> requestPermissions(@org.jetbrains.annotations.NotNull()
    F $this$requestPermissions, @org.jetbrains.annotations.NotNull()
    java.lang.String[] permission, @org.jetbrains.annotations.NotNull()
    kotlin.jvm.functions.Function0<kotlin.Unit> onRequestDone) {
        return null;
    }
}