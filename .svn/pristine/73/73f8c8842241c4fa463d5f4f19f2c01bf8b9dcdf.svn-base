package com.daomingedu.art.di.module;

import com.daomingedu.art.mvp.model.entity.ShareBean;
import com.daomingedu.art.mvp.ui.adapter.ShareAdapter;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import java.util.List;
import javax.annotation.Generated;
import javax.inject.Provider;

@Generated(
  value = "dagger.internal.codegen.ComponentProcessor",
  comments = "https://google.github.io/dagger"
)
public final class StudyCircleModule_ProvideAdapterFactory implements Factory<ShareAdapter> {
  private final StudyCircleModule module;

  private final Provider<List<ShareBean>> datasProvider;

  public StudyCircleModule_ProvideAdapterFactory(
      StudyCircleModule module, Provider<List<ShareBean>> datasProvider) {
    this.module = module;
    this.datasProvider = datasProvider;
  }

  @Override
  public ShareAdapter get() {
    return provideInstance(module, datasProvider);
  }

  public static ShareAdapter provideInstance(
      StudyCircleModule module, Provider<List<ShareBean>> datasProvider) {
    return proxyProvideAdapter(module, datasProvider.get());
  }

  public static StudyCircleModule_ProvideAdapterFactory create(
      StudyCircleModule module, Provider<List<ShareBean>> datasProvider) {
    return new StudyCircleModule_ProvideAdapterFactory(module, datasProvider);
  }

  public static ShareAdapter proxyProvideAdapter(
      StudyCircleModule instance, List<ShareBean> datas) {
    return Preconditions.checkNotNull(
        instance.provideAdapter(datas), "Cannot return null from a non-@Nullable @Provides method");
  }
}
