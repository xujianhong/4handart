package com.daomingedu.art.mvp.presenter;

import android.app.Application;
import com.daomingedu.art.mvp.contract.MyStudyCircleContract;
import com.daomingedu.art.mvp.model.entity.ShareBean;
import com.daomingedu.art.mvp.ui.adapter.ShareAdapter;
import com.jess.arms.http.imageloader.ImageLoader;
import com.jess.arms.integration.AppManager;
import dagger.internal.Factory;
import java.util.List;
import javax.annotation.Generated;
import javax.inject.Provider;
import me.jessyan.rxerrorhandler.core.RxErrorHandler;

@Generated(
  value = "dagger.internal.codegen.ComponentProcessor",
  comments = "https://google.github.io/dagger"
)
public final class MyStudyCirclePresenter_Factory implements Factory<MyStudyCirclePresenter> {
  private final Provider<MyStudyCircleContract.Model> modelProvider;

  private final Provider<MyStudyCircleContract.View> rootViewProvider;

  private final Provider<RxErrorHandler> mErrorHandlerProvider;

  private final Provider<Application> mApplicationProvider;

  private final Provider<ImageLoader> mImageLoaderProvider;

  private final Provider<AppManager> mAppManagerProvider;

  private final Provider<ShareAdapter> mAdapterProvider;

  private final Provider<List<ShareBean>> mDataProvider;

  public MyStudyCirclePresenter_Factory(
      Provider<MyStudyCircleContract.Model> modelProvider,
      Provider<MyStudyCircleContract.View> rootViewProvider,
      Provider<RxErrorHandler> mErrorHandlerProvider,
      Provider<Application> mApplicationProvider,
      Provider<ImageLoader> mImageLoaderProvider,
      Provider<AppManager> mAppManagerProvider,
      Provider<ShareAdapter> mAdapterProvider,
      Provider<List<ShareBean>> mDataProvider) {
    this.modelProvider = modelProvider;
    this.rootViewProvider = rootViewProvider;
    this.mErrorHandlerProvider = mErrorHandlerProvider;
    this.mApplicationProvider = mApplicationProvider;
    this.mImageLoaderProvider = mImageLoaderProvider;
    this.mAppManagerProvider = mAppManagerProvider;
    this.mAdapterProvider = mAdapterProvider;
    this.mDataProvider = mDataProvider;
  }

  @Override
  public MyStudyCirclePresenter get() {
    return provideInstance(
        modelProvider,
        rootViewProvider,
        mErrorHandlerProvider,
        mApplicationProvider,
        mImageLoaderProvider,
        mAppManagerProvider,
        mAdapterProvider,
        mDataProvider);
  }

  public static MyStudyCirclePresenter provideInstance(
      Provider<MyStudyCircleContract.Model> modelProvider,
      Provider<MyStudyCircleContract.View> rootViewProvider,
      Provider<RxErrorHandler> mErrorHandlerProvider,
      Provider<Application> mApplicationProvider,
      Provider<ImageLoader> mImageLoaderProvider,
      Provider<AppManager> mAppManagerProvider,
      Provider<ShareAdapter> mAdapterProvider,
      Provider<List<ShareBean>> mDataProvider) {
    MyStudyCirclePresenter instance =
        new MyStudyCirclePresenter(modelProvider.get(), rootViewProvider.get());
    MyStudyCirclePresenter_MembersInjector.injectMErrorHandler(
        instance, mErrorHandlerProvider.get());
    MyStudyCirclePresenter_MembersInjector.injectMApplication(instance, mApplicationProvider.get());
    MyStudyCirclePresenter_MembersInjector.injectMImageLoader(instance, mImageLoaderProvider.get());
    MyStudyCirclePresenter_MembersInjector.injectMAppManager(instance, mAppManagerProvider.get());
    MyStudyCirclePresenter_MembersInjector.injectMAdapter(instance, mAdapterProvider.get());
    MyStudyCirclePresenter_MembersInjector.injectMData(instance, mDataProvider.get());
    return instance;
  }

  public static MyStudyCirclePresenter_Factory create(
      Provider<MyStudyCircleContract.Model> modelProvider,
      Provider<MyStudyCircleContract.View> rootViewProvider,
      Provider<RxErrorHandler> mErrorHandlerProvider,
      Provider<Application> mApplicationProvider,
      Provider<ImageLoader> mImageLoaderProvider,
      Provider<AppManager> mAppManagerProvider,
      Provider<ShareAdapter> mAdapterProvider,
      Provider<List<ShareBean>> mDataProvider) {
    return new MyStudyCirclePresenter_Factory(
        modelProvider,
        rootViewProvider,
        mErrorHandlerProvider,
        mApplicationProvider,
        mImageLoaderProvider,
        mAppManagerProvider,
        mAdapterProvider,
        mDataProvider);
  }

  public static MyStudyCirclePresenter newMyStudyCirclePresenter(
      MyStudyCircleContract.Model model, MyStudyCircleContract.View rootView) {
    return new MyStudyCirclePresenter(model, rootView);
  }
}
