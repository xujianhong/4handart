package com.daomingedu.art.di.module;

import com.daomingedu.art.mvp.contract.ModifySexContract;
import com.daomingedu.art.mvp.model.ModifySexModel;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.annotation.Generated;
import javax.inject.Provider;

@Generated(
  value = "dagger.internal.codegen.ComponentProcessor",
  comments = "https://google.github.io/dagger"
)
public final class ModifySexModule_ProvideModifySexModelFactory
    implements Factory<ModifySexContract.Model> {
  private final ModifySexModule module;

  private final Provider<ModifySexModel> modelProvider;

  public ModifySexModule_ProvideModifySexModelFactory(
      ModifySexModule module, Provider<ModifySexModel> modelProvider) {
    this.module = module;
    this.modelProvider = modelProvider;
  }

  @Override
  public ModifySexContract.Model get() {
    return provideInstance(module, modelProvider);
  }

  public static ModifySexContract.Model provideInstance(
      ModifySexModule module, Provider<ModifySexModel> modelProvider) {
    return proxyProvideModifySexModel(module, modelProvider.get());
  }

  public static ModifySexModule_ProvideModifySexModelFactory create(
      ModifySexModule module, Provider<ModifySexModel> modelProvider) {
    return new ModifySexModule_ProvideModifySexModelFactory(module, modelProvider);
  }

  public static ModifySexContract.Model proxyProvideModifySexModel(
      ModifySexModule instance, ModifySexModel model) {
    return Preconditions.checkNotNull(
        instance.provideModifySexModel(model),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
